#pragma once

#include <ntddk.h>

// Use standard CTL_CODE so method/access are explicit and safe.
// FILE_DEVICE_UNKNOWN, METHOD_BUFFERED, FILE_ANY_ACCESS
#ifndef FILE_DEVICE_COLINUX
#define FILE_DEVICE_COLINUX FILE_DEVICE_UNKNOWN
#endif

#define IOCTL_COLINUX_MAP_SHARED  CTL_CODE(FILE_DEVICE_COLINUX, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_COLINUX_RUN_TICK    CTL_CODE(FILE_DEVICE_COLINUX, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_COLINUX_VBLK_SUBMIT CTL_CODE(FILE_DEVICE_COLINUX, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_COLINUX_VBLK_SET_BACKING CTL_CODE(FILE_DEVICE_COLINUX, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)
// Direct IO read/write
#define IOCTL_COLINUX_VBLK_READ  CTL_CODE(FILE_DEVICE_COLINUX, 0x805, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
#define IOCTL_COLINUX_VBLK_WRITE CTL_CODE(FILE_DEVICE_COLINUX, 0x806, METHOD_IN_DIRECT,  FILE_ANY_ACCESS)

// VTTY byte-stream IOCTLs (METHOD_BUFFERED)
#define IOCTL_COLINUX_VTTY_PUSH  CTL_CODE(FILE_DEVICE_COLINUX, 0x807, METHOD_BUFFERED, FILE_ANY_ACCESS) // In: bytes to guest
#define IOCTL_COLINUX_VTTY_PULL  CTL_CODE(FILE_DEVICE_COLINUX, 0x808, METHOD_BUFFERED, FILE_ANY_ACCESS) // Out: bytes from guest
